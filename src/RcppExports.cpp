// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mvrnormArma
arma::mat mvrnormArma(const int n, const arma::vec mu, const arma::mat Sigma);
RcppExport SEXP _diffNet_mvrnormArma(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(n, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// solve_tmp_c
arma::mat solve_tmp_c(const arma::vec x);
RcppExport SEXP _diffNet_solve_tmp_c(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_tmp_c(x));
    return rcpp_result_gen;
END_RCPP
}
// get_score_c
double get_score_c(const arma::vec x, const arma::vec y1, const arma::vec y2);
RcppExport SEXP _diffNet_get_score_c(SEXP xSEXP, SEXP y1SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(get_score_c(x, y1, y2));
    return rcpp_result_gen;
END_RCPP
}
// get_score_w_c
double get_score_w_c(const arma::vec x, const arma::vec w);
RcppExport SEXP _diffNet_get_score_w_c(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(get_score_w_c(x, w));
    return rcpp_result_gen;
END_RCPP
}
// get_score_W_c
arma::vec get_score_W_c(const arma::vec x, const arma::mat W);
RcppExport SEXP _diffNet_get_score_W_c(SEXP xSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(get_score_W_c(x, W));
    return rcpp_result_gen;
END_RCPP
}
// get_degree_c
double get_degree_c(const arma::vec x, const arma::vec y, const arma::mat Y);
RcppExport SEXP _diffNet_get_degree_c(SEXP xSEXP, SEXP ySEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(get_degree_c(x, y, Y));
    return rcpp_result_gen;
END_RCPP
}
// get_degree_w_c
double get_degree_w_c(const arma::vec x, const arma::mat W);
RcppExport SEXP _diffNet_get_degree_w_c(SEXP xSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(get_degree_w_c(x, W));
    return rcpp_result_gen;
END_RCPP
}
// get_eta_c
double get_eta_c(const double rho12, const double rho23, const double rho13);
RcppExport SEXP _diffNet_get_eta_c(SEXP rho12SEXP, SEXP rho23SEXP, SEXP rho13SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rho12(rho12SEXP);
    Rcpp::traits::input_parameter< const double >::type rho23(rho23SEXP);
    Rcpp::traits::input_parameter< const double >::type rho13(rho13SEXP);
    rcpp_result_gen = Rcpp::wrap(get_eta_c(rho12, rho23, rho13));
    return rcpp_result_gen;
END_RCPP
}
// dgenrayleigh_c
double dgenrayleigh_c(const double t, const double alpha, const double beta, const bool logg);
RcppExport SEXP _diffNet_dgenrayleigh_c(SEXP tSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP loggSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type logg(loggSEXP);
    rcpp_result_gen = Rcpp::wrap(dgenrayleigh_c(t, alpha, beta, logg));
    return rcpp_result_gen;
END_RCPP
}
// cgenrayleigh_c
double cgenrayleigh_c(const double t, const double alpha, const double beta, const bool logg);
RcppExport SEXP _diffNet_cgenrayleigh_c(SEXP tSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP loggSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const bool >::type logg(loggSEXP);
    rcpp_result_gen = Rcpp::wrap(cgenrayleigh_c(t, alpha, beta, logg));
    return rcpp_result_gen;
END_RCPP
}
// get_H_c
arma::mat get_H_c(const arma::mat Sigma);
RcppExport SEXP _diffNet_get_H_c(SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_H_c(Sigma));
    return rcpp_result_gen;
END_RCPP
}
// get_A1_c
double get_A1_c(int k, int p, arma::mat TT, arma::mat RR, int n);
RcppExport SEXP _diffNet_get_A1_c(SEXP kSEXP, SEXP pSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A1_c(k, p, TT, RR, n));
    return rcpp_result_gen;
END_RCPP
}
// get_A2_c
double get_A2_c(int k, int p, arma::mat TT, arma::mat RR, int n);
RcppExport SEXP _diffNet_get_A2_c(SEXP kSEXP, SEXP pSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A2_c(k, p, TT, RR, n));
    return rcpp_result_gen;
END_RCPP
}
// get_A3_c
double get_A3_c(int k, int p, arma::mat TT, arma::mat RR, int n);
RcppExport SEXP _diffNet_get_A3_c(SEXP kSEXP, SEXP pSEXP, SEXP TTSEXP, SEXP RRSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type TT(TTSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(get_A3_c(k, p, TT, RR, n));
    return rcpp_result_gen;
END_RCPP
}
// get_TT_RR_c
Rcpp::List get_TT_RR_c(arma::vec A);
RcppExport SEXP _diffNet_get_TT_RR_c(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(get_TT_RR_c(A));
    return rcpp_result_gen;
END_RCPP
}
// small_sample_correction_c
double small_sample_correction_c(arma::vec x, double C, int k, int p);
RcppExport SEXP _diffNet_small_sample_correction_c(SEXP xSEXP, SEXP CSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(small_sample_correction_c(x, C, k, p));
    return rcpp_result_gen;
END_RCPP
}
// cubic_correction_c
double cubic_correction_c(arma::vec x, double C, int k, int p);
RcppExport SEXP _diffNet_cubic_correction_c(SEXP xSEXP, SEXP CSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cubic_correction_c(x, C, k, p));
    return rcpp_result_gen;
END_RCPP
}
// cubic_coeff_c
arma::vec cubic_coeff_c(arma::vec A, double C, int k, int p);
RcppExport SEXP _diffNet_cubic_coeff_c(SEXP ASEXP, SEXP CSEXP, SEXP kSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(cubic_coeff_c(A, C, k, p));
    return rcpp_result_gen;
END_RCPP
}
// simulate_c
Rcpp::List simulate_c(arma::vec x, arma::mat Sigma, bool use_Hhat);
RcppExport SEXP _diffNet_simulate_c(SEXP xSEXP, SEXP SigmaSEXP, SEXP use_HhatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type use_Hhat(use_HhatSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_c(x, Sigma, use_Hhat));
    return rcpp_result_gen;
END_RCPP
}
// shuffle_x_c
arma::mat shuffle_x_c(arma::vec x, int B);
RcppExport SEXP _diffNet_shuffle_x_c(SEXP xSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(shuffle_x_c(x, B));
    return rcpp_result_gen;
END_RCPP
}
// store_W_c
arma::mat store_W_c(const arma::vec y, const arma::mat smallY);
RcppExport SEXP _diffNet_store_W_c(SEXP ySEXP, SEXP smallYSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type smallY(smallYSEXP);
    rcpp_result_gen = Rcpp::wrap(store_W_c(y, smallY));
    return rcpp_result_gen;
END_RCPP
}
// bootstrap_c
arma::mat bootstrap_c(const arma::vec x, const int B, const arma::mat W);
RcppExport SEXP _diffNet_bootstrap_c(SEXP xSEXP, SEXP BSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrap_c(x, B, W));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_diffNet_mvrnormArma", (DL_FUNC) &_diffNet_mvrnormArma, 3},
    {"_diffNet_solve_tmp_c", (DL_FUNC) &_diffNet_solve_tmp_c, 1},
    {"_diffNet_get_score_c", (DL_FUNC) &_diffNet_get_score_c, 3},
    {"_diffNet_get_score_w_c", (DL_FUNC) &_diffNet_get_score_w_c, 2},
    {"_diffNet_get_score_W_c", (DL_FUNC) &_diffNet_get_score_W_c, 2},
    {"_diffNet_get_degree_c", (DL_FUNC) &_diffNet_get_degree_c, 3},
    {"_diffNet_get_degree_w_c", (DL_FUNC) &_diffNet_get_degree_w_c, 2},
    {"_diffNet_get_eta_c", (DL_FUNC) &_diffNet_get_eta_c, 3},
    {"_diffNet_dgenrayleigh_c", (DL_FUNC) &_diffNet_dgenrayleigh_c, 4},
    {"_diffNet_cgenrayleigh_c", (DL_FUNC) &_diffNet_cgenrayleigh_c, 4},
    {"_diffNet_get_H_c", (DL_FUNC) &_diffNet_get_H_c, 1},
    {"_diffNet_get_A1_c", (DL_FUNC) &_diffNet_get_A1_c, 5},
    {"_diffNet_get_A2_c", (DL_FUNC) &_diffNet_get_A2_c, 5},
    {"_diffNet_get_A3_c", (DL_FUNC) &_diffNet_get_A3_c, 5},
    {"_diffNet_get_TT_RR_c", (DL_FUNC) &_diffNet_get_TT_RR_c, 1},
    {"_diffNet_small_sample_correction_c", (DL_FUNC) &_diffNet_small_sample_correction_c, 4},
    {"_diffNet_cubic_correction_c", (DL_FUNC) &_diffNet_cubic_correction_c, 4},
    {"_diffNet_cubic_coeff_c", (DL_FUNC) &_diffNet_cubic_coeff_c, 4},
    {"_diffNet_simulate_c", (DL_FUNC) &_diffNet_simulate_c, 3},
    {"_diffNet_shuffle_x_c", (DL_FUNC) &_diffNet_shuffle_x_c, 2},
    {"_diffNet_store_W_c", (DL_FUNC) &_diffNet_store_W_c, 2},
    {"_diffNet_bootstrap_c", (DL_FUNC) &_diffNet_bootstrap_c, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_diffNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
